#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('watsonstt:server');
var http = require('http');
var request = require('request');
var WebSocket = require('ws')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var io = require('socket.io')(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


io.on('connection', function (socket) {

  console.log("\nNew connection to server");
  //socket.emit emits a message to a single connection
  /*
  socket.emit('newMessage', {
    from: 'John',
    text: "See you then",
    createdAt:123123
  })
  */
  //---------- Event Emmiters ----------

  socket.emit('newMessage',{
    from:"Admin",
    text:"Welcome to the chat",
    createAt:new Date().getTime()
  })

  socket.broadcast.emit('newMessage',{
    from:"Admin",
    text:"A new user joined the chat",
    createAt:new Date().getTime()
  });
  //---------- Event Listeners ----------
  socket.on('disconnect', function () {
    console.log("\nSocket disconnected");
  });

  socket.on('createMessage', function(message){
    console.log('createMessage event listened',message);
    //Cuando me llega un mail o mensaje, envío a todos los ususarios el update
    /*
    io.emit('newMessage',{
      //Uso los parametros que me llegan del cliente
      from:message.from,
      to:message.to,
      createdAt:new Date().getTime()
    })
    */
    //Cuando me llega un mail o mensaje, envío a todos los ususarios MENOS A MI
    socket.broadcast.emit('newMessage',{
      from:message.from,
      to:message.to,
      createdAt:new Date().getTime()
    })
  })


  //---------- --------------- ----------



});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Speech to text
 */

var token = '';

let getTokenSTT = () => {
  return new Promise(
    (resolve, reject) => {
      request.get('https://stream.watsonplatform.net/authorization/api/v1/token?url=https://stream.watsonplatform.net/speech-to-text/api', {
        'auth': {
          'user': '08f3a6da-75df-4e84-88b5-8c6322b1054c',
          'pass': 'YnTw5Bx826vm'
        }
      },(error, response, body) => {
        console.log(body);
        token = body;
        resolve(token);
      });
    }
  )
}




function onOpen(evt) {
  var message = {
    'action': 'start',
    'content-type': 'audio/l16;rate=22050'
  };
  websocket.send(JSON.stringify(message));
}

function onMessage(evt) {
  console.log("\nonMessage: "+evt);
}

function onClose(evt) {
  console.log("\nonClose: "+JSON.stringify(evt.data));
}
